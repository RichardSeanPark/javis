# src/jarvis/core/context_manager.py
import logging
from collections import defaultdict, deque
from typing import Dict, List, Tuple, Optional

logger = logging.getLogger(__name__)

# Type alias for a message tuple: (user_input, ai_response, original_language)
MessageType = Tuple[str, str, Optional[str]]

class ContextManager:
    """
    Manages conversation history for different sessions.
    Stores history in memory.
    """
    def __init__(self):
        # Use defaultdict with deque for efficient history management (max length)
        # Stores tuples of (user_input, ai_response, original_language)
        self.session_histories: Dict[str, deque[MessageType]] = defaultdict(lambda: deque(maxlen=20)) # Default max 20 turns
        logger.info("ContextManager initialized.")

    def add_message(self, session_id: str, user_input: str, ai_response: str, original_language: Optional[str] = None):
        """
        Adds a user input and its corresponding AI response to the session history.

        Args:
            session_id: The unique identifier for the session.
            user_input: The text input provided by the user.
            ai_response: The text response generated by the AI.
            original_language: The detected language of the original user input (optional).
        """
        if not session_id:
            logger.error("Cannot add message: session_id is required.")
            return

        message: MessageType = (user_input, ai_response, original_language)
        self.session_histories[session_id].append(message)
        logger.debug(f"Added message to session {session_id}. History size: {len(self.session_histories[session_id])}")

    def get_formatted_context(self, session_id: str, max_history: int = 5) -> str:
        """
        Retrieves and formats the recent conversation history for a given session.

        Args:
            session_id: The unique identifier for the session.
            max_history: The maximum number of recent conversation turns to include.

        Returns:
            A formatted string containing the recent conversation history,
            suitable for including in an LLM prompt. Returns an empty string
            if the session ID is not found or has no history.
        """
        if session_id not in self.session_histories:
            logger.warning(f"No history found for session_id: {session_id}")
            return ""

        history = self.session_histories[session_id]
        # Get the last 'max_history' items. Deque stores items in insertion order.
        recent_history = list(history)[-max_history:]

        if not recent_history:
            return ""

        formatted_context = ""
        for user_input, ai_response, _ in recent_history:
            formatted_context += f"User: {user_input}\n"
            formatted_context += f"AI: {ai_response}\n"

        logger.debug(f"Retrieved formatted context for session {session_id} (last {len(recent_history)} turns).")
        # Remove the trailing newline for cleaner integration
        return formatted_context.strip()

    def clear_history(self, session_id: str):
        """Clears the conversation history for a specific session."""
        if session_id in self.session_histories:
            self.session_histories[session_id].clear()
            logger.info(f"Cleared history for session_id: {session_id}")
            del self.session_histories[session_id] # Remove entry from defaultdict if empty
        else:
            logger.warning(f"Attempted to clear history for non-existent session_id: {session_id}") 